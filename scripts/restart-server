#!/usr/bin/env python3
import os
import sys
import pwd
import subprocess
import logging
import time

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from scripts.lib.zulip_tools import ENDC, OKGREEN, DEPLOYMENTS_DIR

logging.Formatter.converter = time.gmtime
logging.basicConfig(format="%(asctime)s restart-server: %(message)s",
                    level=logging.INFO)

deploy_path = os.path.realpath(os.path.join(os.path.dirname(__file__), '..'))
os.chdir(deploy_path)

if pwd.getpwuid(os.getuid()).pw_name != "zulip":
    logging.error("Must be run as user 'zulip'.")
    sys.exit(1)

# Send a statsd event on restarting the server
subprocess.check_call(["./manage.py", "send_stats", "incr", "events.server_restart", str(int(time.time()))])

logging.info("Filling memcached caches")
subprocess.check_call(["./manage.py", "fill_memcached_caches"])

core_server_services = ["zulip-django", "zulip-senders:*"]
if os.path.exists("/etc/supervisor/conf.d/thumbor.conf"):
    core_server_services.append("zulip-thumbor")

current_symlink = os.path.join(DEPLOYMENTS_DIR, "current")
last_symlink = os.path.join(DEPLOYMENTS_DIR, "last")
if os.readlink(current_symlink) != deploy_path:
    subprocess.check_call(["ln", '-nsf', os.readlink(current_symlink), last_symlink])
    subprocess.check_call(["ln", '-nsf', deploy_path, current_symlink])

# We restart just the zulip-tornado service early, in order to
# minimize downtime of the tornado service caused by too many Python
# processes restarting at the same time resulting in it receiving
# insufficient priority.  This is important, because Tornado is the
# main source of user-visible downtime when we restart a Zulip server.
subprocess.check_call(["supervisorctl", "restart", "zulip-tornado"])

# Restart the uWSGI and related processes via supervisorctl.
logging.info("Stopping workers")
subprocess.check_call(["supervisorctl", "stop", "zulip-workers:*"])
logging.info("Stopping server core")
subprocess.check_call(["supervisorctl", "stop"] + core_server_services)

logging.info("Starting server core")
subprocess.check_call(["supervisorctl", "start"] + core_server_services)
logging.info("Starting workers")
subprocess.check_call(["supervisorctl", "start", "zulip-workers:*"])

using_sso = subprocess.check_output(['./scripts/get-django-setting', 'USING_APACHE_SSO'])
if using_sso.strip() == b'True':
    logging.info("Restarting Apache WSGI process...")
    subprocess.check_call(["pkill", "-f", "apache2", "-u", "zulip"])

if os.path.exists("/etc/supervisor/conf.d/zulip_db.conf"):
    subprocess.check_call(["supervisorctl", "restart", "process-fts-updates"])

logging.info("Done!")
print(OKGREEN + "Application restarted successfully!" + ENDC)
